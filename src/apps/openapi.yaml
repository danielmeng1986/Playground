openapi: 3.0.3
info:
  title: City Playground API
  contact:
    name: yingchen
    email: yingchen.meng@web.de
    url: www.yingchen.de
  version: 1.0.0
  license:
    name: playground
    url: 'https://opensource.org/license/mit'
  description: 'API for managing users, cities, playgrounds, and related activities.'
servers:
  - url: 'http://localhost:3000'
paths:
  /auth:
    post:
      tags:
        - Auth
      summary: User login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Auth'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
        '401':
          description: Invalid credentials
        5XX:
          description: Server Error
      operationId: post-login
      description: login with username and password
  /auth/register:
    post:
      summary: register new account
      tags:
        - Auth
      responses:
        '200':
          description: Registration successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegisterResponse'
        '409':
          description: Email already registered
        '400':
          description: Invalid input data
        '5XX':
          description: Server Error
      operationId: post-auth-register
      description: register account
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterInfo'
        description: register with email address
  /auth/me:
    get:
      tags:
        - Auth
      summary: Get current user info
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Current user info
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
        5XX:
          description: Server Error
      operationId: get-current-user
      description: Get current user
  /refresh:
    post:
      tags:
        - Auth
      summary: Refresh JWT token
      requestBody:
        required: true
        content: {}
      responses:
        '200':
          description: Token refreshed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
        '401':
          description: Invalid refresh token
        5XX:
          description: Server Error
      operationId: post-refresh-token
      description: Refresh token with rToken
      parameters: []
      security:
        - bearerAuth: []
  /users:
    get:
      tags:
        - Users
      summary: Get all users
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: limit
          schema:
            type: integer
          description: Max number of users to return
        - in: query
          name: skip
          schema:
            type: integer
          description: Number of users to skip
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: object
                properties:
                  users:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
                  total:
                    type: integer
                  skip:
                    type: integer
                  limit:
                    type: integer
                required:
                  - users
                  - total
                  - skip
                  - limit
        '401':
          description: Unauthorized
        5XX:
          description: Server Error
      operationId: get-users
      description: Get all users
  '/users/{userId}':
    get:
      tags:
        - Users
      summary: Get user by ID
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: path
          description: "User identifier"
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: User details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
        '404':
          description: User not found
        5XX:
          description: Server Error
      operationId: get-user-by-id
      description: Get user by id
  /playgrounds:
    get:
      tags:
        - Playgrounds
      summary: Get all playgrounds
      parameters:
        - in: query
          name: limit
          schema:
            type: integer
          description: Max number of playgrounds to return
        - in: query
          name: skip
          schema:
            type: integer
          description: Number of playgrounds to skip
      responses:
        '200':
          description: List of playgrounds
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlaygroundCollection'
        '401':
          description: Unauthorized
        5XX:
          description: Server Error
      operationId: get-playgrounds
      description: Get list of playgrounds
      security:
        - bearerAuth: []
  '/playgrounds/{playgroundId}':
    get:
      tags:
        - Playgrounds
      summary: Get playground by ID
      parameters:
        - name: playgroundId
          required: true
          schema:
            type: integer
          in: path
          description: "Playground identifier"
      responses:
        '200':
          description: Playground details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Playground'
        '401':
          description: Unauthorized
        '404':
          description: Playground not found
        5XX:
          description: Server Error
      operationId: get-playgrounds-by-id
      description: Get playgournd by id
      security:
        - bearerAuth: []
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    UserName:
      type: object
      properties:
        FirstName:
          type: string
        LastName:
          type: string
      required:
        - FirstName
        - LastName
    User:
      type: object
      properties:
        UserID:
          type: integer
        Email:
          type: string
          format: email
        Name:
          $ref: '#/components/schemas/UserName'
        Alias:
          type: string
      required:
        - UserID
        - Name
        - Alias
        - Email
    Playground:
      type: object
      properties:
        PlaygroundID:
          type: integer
        Name:
          type: string
        Location:
          type: string
      required:
        - PlaygroundID
        - Name
        - Location
    Auth:
      title: Auth
      type: object
      properties:
        username:
          type: string
        password:
          type: string
    Token:
      title: Token
      type: object
      properties:
        token:
          type: string
        refreshToken:
          type: string
        status:
          type: integer
    PlaygroundCollection:
      title: PlaygroundCollection
      type: object
      properties:
        playgrounds:
          type: array
          items:
            $ref: '#/components/schemas/Playground'
        total:
          type: integer
        skip:
          type: integer
        limit:
          type: integer
    RegisterInfo:
      title: RegisterInfo
      x-stoplight:
        id: y2u3qkn5df3pe
      type: object
      properties:
        email:
          type: string
          format: email
          x-stoplight:
            id: mebo54flsgyad
        password:
          type: string
          minLength: 6
          x-stoplight:
            id: vctwtwwv1rj4f
      required:
        - email
        - password
    RegisterResponse:
      title: RegisterResponse
      type: object
      properties:
        message:
          type: string
          example: 'User registered successfully'
        user:
          type: object
          properties:
            UserID:
              type: integer
            Email:
              type: string
              format: email
            Alias:
              type: string
          required:
            - UserID
            - Email
            - Alias
      required:
        - message
        - user
tags:
  - name: Auth
    description: auth
  - name: Playgrounds
    description: playgrounds
  - name: Users
    description: users
