openapi: 3.0.3
info:
  title: City Playground API
  version: 1.0.0
  description: API for managing users, cities, playgrounds, and related activities.
servers:
  - url: http://localhost:3000
paths:
  /auth:
    post:
      tags:
        - Auth
      summary: User login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
              required:
                - username
                - password
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                  refreshToken:
                    type: string
                  status:
                    type: string
                required:
                  - token
                  - refreshToken
                  - status
        '401':
          description: Invalid credentials
  /auth/me:
    get:
      tags:
        - Auth
      summary: Get current user info
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Current user info
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
  /refresh:
    post:
      tags:
        - Auth
      summary: Refresh JWT token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                refreshToken:
                  type: string
              required:
                - refreshToken
      responses:
        '200':
          description: Token refreshed
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                  refreshToken:
                    type: string
                  status:
                    type: string
                required:
                  - token
                  - refreshToken
                  - status
        '401':
          description: Invalid refresh token
  /users:
    get:
      tags:
        - Users
      summary: Get all users
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: limit
          schema:
            type: integer
          description: Max number of users to return
        - in: query
          name: skip
          schema:
            type: integer
          description: Number of users to skip
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: object
                properties:
                  users:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
                  total:
                    type: integer
                  skip:
                    type: integer
                  limit:
                    type: integer
                required:
                  - users
                  - total
                  - skip
                  - limit
  /users/{userId}:
    get:
      tags:
        - Users
      summary: Get user by ID
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: User details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
  /playgrounds:
    get:
      tags:
        - Playgrounds
      summary: Get all playgrounds
      parameters:
        - in: query
          name: limit
          schema:
            type: integer
          description: Max number of playgrounds to return
        - in: query
          name: skip
          schema:
            type: integer
          description: Number of playgrounds to skip
      responses:
        '200':
          description: List of playgrounds
          content:
            application/json:
              schema:
                type: object
                properties:
                  playgrounds:
                    type: array
                    items:
                      $ref: '#/components/schemas/Playground'
                  total:
                    type: integer
                  skip:
                    type: integer
                  limit:
                    type: integer
                required:
                  - playgrounds
                  - total
                  - skip
                  - limit
  /playgrounds/{playgroundId}:
    get:
      tags:
        - Playgrounds
      summary: Get playground by ID
      parameters:
        - in: path
          name: playgroundId
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Playground details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Playground'
        '404':
          description: Playground not found
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    UserName:
      type: object
      properties:
        FirstName:
          type: string
        LastName:
          type: string
      required:
        - FirstName
        - LastName
    User:
      type: object
      properties:
        UserID:
          type: integer
        Name:
          $ref: '#/components/schemas/UserName'
        Alias:
          type: string
        Email:
          type: string
          format: email
      required:
        - UserID
        - Name
        - Alias
        - Email
    City:
      type: object
      properties:
        CityID:
          type: integer
        Name:
          type: string
        Country:
          type: string
      required:
        - CityID
        - Name
        - Country
    Playground:
      type: object
      properties:
        PlaygroundID:
          type: integer
        Name:
          type: string
        Location:
          type: string
      required:
        - PlaygroundID
        - Name
        - Location
    Visited:
      type: object
      properties:
        VisitedID:
          type: integer
        UserID:
          type: integer
        PlaygroundID:
          type: integer
        VisitedAt:
          type: string
          format: date
      required:
        - VisitedID
        - UserID
        - PlaygroundID
        - VisitedAt
    Tag:
      type: object
      properties:
        TagID:
          type: integer
        Name:
          type: string
      required:
        - TagID
        - Name
    Favorite:
      type: object
      properties:
        FavoriteID:
          type: integer
        UserID:
          type: integer
        PlaygroundID:
          type: integer
        FavoritedAt:
          type: string
          format: date
      required:
        - FavoriteID
        - UserID
        - PlaygroundID
        - FavoritedAt
    Wished:
      type: object
      properties:
        WishedID:
          type: integer
        UserID:
          type: integer
        PlaygroundID:
          type: integer
        WishedAt:
          type: string
          format: date
      required:
        - WishedID
        - UserID
        - PlaygroundID
        - WishedAt
    Review:
      type: object
      properties:
        ReviewID:
          type: integer
        Rating:
          type: integer
        UserID:
          type: integer
        PlaygroundID:
          type: integer
        ReviewedAt:
          type: string
          format: date
      required:
        - ReviewID
        - Rating
        - UserID
        - PlaygroundID
        - ReviewedAt
    Comment:
      type: object
      properties:
        CommentID:
          type: integer
        UserID:
          type: integer
        PlaygroundID:
          type: integer
        Content:
          type: string
        CommentedAt:
          type: string
          format: date
      required:
        - CommentID
        - UserID
        - PlaygroundID
        - Content
        - CommentedAt
